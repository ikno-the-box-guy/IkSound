@using System.Net
@using System.Text.Encodings.Web
@using IkSound.Models.Epidemic
@using IkSound.Utils
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JSRuntime

@if(Songs != null && Songs.Count == 0 && TotalHits == 0)
{
    <p>No @(Sfx ? "sound effects" : "songs") found</p>
}

<script>
    window.getDistanceToBottom = function() {
        let scrollPosition = document.documentElement.scrollTop || document.body.scrollTop;
        let scrollHeight = document.documentElement.scrollHeight || document.body.scrollHeight;
        let clientHeight = document.documentElement.clientHeight || document.body.clientHeight;
        
        return scrollHeight - (scrollPosition + clientHeight);
    }
</script>

@if(Songs != null && Songs.Count > 0)
{
    <div class="container">
        <div class="col" @onwheel="OnWheel" style="overflow-x: hidden">
            @foreach (Song song in Songs)
            {
                <SongCard Song="@song" @key="song.Id"/>
            }
            @{ IsLoading = false; }
        
            @if (Songs.Count < TotalHits && TotalHits > 0)
            {
                <button class="btn fade-in wide-btn m-2" @onclick="LoadMore">Load more</button>
            }
            else
            {
                <hr/>
            }
        </div>
    </div>
}

@code {
    const int PageSize = 20;
    
    List<Song>? Songs { get; set; }
    int TotalHits { get; set; }
    int Page { get; set; } = 1;
     
    HashSet<int> Ids { get; set; } = new();
    
    [Parameter] public string? SearchTerm { get; set; }
    [Parameter] public string? Genre { get; set; }
    [Parameter] public bool Sfx { get; set; } = true;
    
    private bool IsLoading { get; set; }

    async Task OnWheel(WheelEventArgs e)
    {
        if (e.DeltaY <= 0 || IsLoading)
            return;
        
        float distanceToBottom = await JSRuntime.InvokeAsync<float>("getDistanceToBottom");
        
        if (distanceToBottom < 100 && !IsLoading)
            await LoadMore();
    }
    
    protected override async Task OnInitializedAsync()
    {
        if(SearchTerm == null && Genre == null)
        {
            NavigationManager.NavigateTo("/sounds");
        }

        Songs = (await LoadSongs())?.ToList() ?? new List<Song>();
    }
    
    private async Task LoadMore()
    {
        if(Songs?.Count >= TotalHits)
        {
            return;
        }
        
        IsLoading = true;
        
        Page++;
        
        IEnumerable<Song>? songs = await LoadSongs();
        
        if(songs != null)
            Songs?.AddRange(songs);
    }
    
    private async Task<IEnumerable<Song>?> LoadSongs()
    {
        string term = SearchTerm == null ? "" : $"&term={WebUtility.UrlEncode(SearchTerm)}";
        string genre = Genre == null ? "" : $"&genres={Genre}";
        
        string url = $"json/search/{(Sfx ? "sfx" : "tracks")}/?limit={PageSize}&page={Page}{term}{genre}&order=desc&sort=relevance";
        
        Root? root = await Http.GetFromJsonAsync<Root>(HttpUtils.GetUrl(url));

        if(root == null)
        {
            Console.WriteLine("Failed to fetch songs");
            return null;
        }
        
        TotalHits = root?.Meta.TotalHits ?? 0;
        
        return TotalHits == 0 ? null : root?.Entities.Tracks.Values.Where(x => Ids.Add(x.Id));
    }
}