@using System.Globalization
@using IkSound.Models.Epidemic
@using IkSound.Utils
@inject IJSRuntime JSRuntime

@* TODO: Start resizing and hiding elements based on screen size *@

<div class="song-container song-height w-auto d-grid fade-in gap-2" onmouseover="revealButtons('@Id')" onmouseout="hideButtons('@Id')">
    <div class="d-flex gap-2 align-items-center song-height overflow-hidden">
        <span class="cover-size pointer" onclick="togglePlay('@Id')">
            <div class="cover-size audio-control" id="play-@Id" hidden>
                <i class="bi bi-play"></i>
            </div>
            <div class="cover-size audio-control" id="pause-@Id" hidden>
                <i class="bi bi-pause"></i>
            </div>
            <img class="cover-size" id="art-@Id" src="@(Song.CoverArt.BaseUrl + Song.CoverArt.Sizes.XS)" alt="@Song.Title"/>
        </span>
        <div class="d-flex flex-column overflow-hidden">
            @* TODO: Fix individual width problem *@
            <a class="clickable-link text-truncate fs-6 text-body text-decoration-none" href="@Url">@Song.Title</a>
            @if (!Song.IsSfx)
            {
                <a class="clickable-link text-truncate fs-7 text-body-tertiary text-decoration-none" href="@("https://www.epidemicsound.com/artists/" + Song.Creatives["mainArtists"][0].Slug)">@Song.Creatives["mainArtists"][0]</a>
            }
        </div>
    </div>
    
    <div class="align-content-center song-height position-relative d-flex pointer" onclick="manageWaveformClick(event, this, '@Id')">
        <span class="h-100 position-absolute z-1 playhead" id="playhead-@Id" style="display: none;"></span>
        <audio src="@Song.Stems[SelectedStem].LqMp3Url" id="audio-@Id" preload="none"></audio>
        <Waveform Id="Id" WaveformUrl="@Song.Stems.First().Value.WaveformUrl"></Waveform>
    </div>

    <div class="text-body-tertiary align-content-center">
        <span class="fs-7">@(Song.Length / 60):@((Song.Length % 60).ToString("D2"))</span>
    </div>
    
    <div class="align-content-center overflow-hidden">
        <a class="text-truncate text-body-tertiary clickable-link w-100 fs-7 d-block" href="search?genre=@Genre.Slug&sfx=@Song.IsSfx">@Genre.DisplayTag</a>
        <span class="text-truncate text-body-tertiary w-100 fs-7 d-block">@GetTags()</span>
    </div>
    
    <div class="text-body-tertiary align-content-center d-flex flex-row justify-content-between">
        <button class="h-100 empty-btn" onclick="navigator.clipboard.writeText('@Url');"><i class="bi bi-link-45deg fs-4"></i></button>
        <a class="h-100 empty-btn" href="@("https://corsproxy.io/?" + Song.Stems[SelectedStem].LqMp3Url)" download="@($"{Song.Title} ({SelectedStem})")" onclick="event.preventDefault(); window.download(this.href, this.download);"><i class="bi bi-download fs-5"></i></a>
        <button class="h-100 empty-btn" type="button" data-bs-toggle="modal" data-bs-target="#modal-@Id"><i class="bi bi-three-dots-vertical"></i></button>
    </div>
</div>

<div class="modal fade" id="modal-@Id" tabindex="-1" aria-labelledby="modal-label-@Id" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="modal-label-@Id">Change stem type</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <select class="form-control" @onchange="OnStemChange">
                    @foreach(var stem in Song.Stems)
                    {
                        <option value="@stem.Key">@stem.Key.CapitalizeFirst()</option>
                    }
                </select>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public Song Song { get; set; } = null!;
    Guid Id { get; set; } = Guid.NewGuid();
    string SelectedStem { get; set; } = "full";

    string Url => $"https://www.epidemicsound.com/track/{Song.PublicSlug}";
    private Genre Genre => Song.Genres.First();

    protected override void OnInitialized()
    {
        SelectedStem = Song.Stems.First().Key;
    }
    
    void OnStemChange(ChangeEventArgs e)
    {
        SelectedStem = e.Value?.ToString() ?? SelectedStem;
    }
    
    string GetTags()
    {
        return Song.IsSfx ? 
            string.Join(", ", Song.MetadataTags.Take(2).Select(str => str.ToTitleCase())) : 
            string.Join(", ", Song.Moods);
    }
}